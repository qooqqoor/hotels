{"version":3,"sources":["conponents/Loading/index.js","router/index.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","HomePage","lazy","Room","RouterPage","fallback","path","exact","component","React","Component","axios","defaults","headers","common","App","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mGAAA,sDAGgBA,GAHhB,MAG0B,WACtB,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,cACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,cACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,cACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,cACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,cACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,cACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,cACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,cACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,eACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,eACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,eACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,eACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,eACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,eACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,eACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,eACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,eACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,eACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,eACX,yBAAKA,UAAU,e,wNC9D7BC,EAAWC,gBAAK,kBAClB,gCAIEC,EAAOD,gBAAK,kBACd,gCAOEE,E,uKAGE,OAGI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,WAAD,CAAUC,SAAW,kBAACN,EAAA,EAAD,OAGjB,yBAAKC,UAAU,SACX,kBAAC,IAAD,CAAOM,KAAK,IAAIC,OAAK,EAACC,UAAWP,IACjC,kBAAC,IAAD,CAAOK,KAAK,QAAQC,OAAK,EAACC,UAAWL,Y,GAbxCM,IAAMC,W,eCZ/BC,EAAMC,SAASC,QAAQC,OAAvB,cAAiD,sE,IAiBlCC,E,uKAbX,OACI,oCACI,0BAAMC,KAAK,+FAA+FC,IAAI,eAE9G,kBAAC,EAAD,W,GANMR,IAAMC,WCMJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2cd26278.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.less\"\r\n\r\nexport   const  Loading = () =>{\r\n    return(\r\n        <div className=\"loading\">\r\n            <div className=\"loading-ball\">\r\n                <div className=\"container1\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container2\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container3\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container4\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container5\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container6\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container7\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container8\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container9\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container10\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container11\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container12\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container13\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container14\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container15\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container16\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container17\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container18\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container19\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n                <div className=\"container20\">\r\n                    <div className=\"ball\"></div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React, { lazy,Suspense  } from \"react\";\r\nimport {Route,BrowserRouter,Switch} from \"react-router-dom\"\r\nimport {Loading} from \"../conponents/Loading\"\r\nconst HomePage = lazy(() =>\r\n    import(\r\n       '../views/Homepage/Homepage.js'\r\n        )\r\n)\r\nconst Room = lazy(() =>\r\n    import(\r\n        '../views/room/'\r\n        )\r\n)\r\n\r\n\r\n\r\nclass RouterPage extends React.Component{\r\n    render() {\r\n\r\n        return (\r\n\r\n\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Suspense fallback={ <Loading/>}>\r\n                        {/* The corresponding component will show here if the current URL matches the path */}\r\n\r\n                        <div className=\"pages\">\r\n                            <Route path=\"/\" exact component={HomePage} />\r\n                            <Route path=\"/room\" exact component={Room} />\r\n                        </div>\r\n\r\n\r\n\r\n                    </Suspense>\r\n                </Switch>\r\n            </BrowserRouter>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport   {RouterPage}","import React from 'react';\r\nimport './App.less';\r\nimport {RouterPage} from  './router/index.js'\r\nimport axios from \"axios\";\r\naxios.defaults.headers.common['Authorization'] = 'Bearer y3BpjcSJlpfrhNsBtPRwXopCnx67lKIG5CVx0rweLOBO00GR4cq6aROrANfs';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n        <>\r\n            <link href=\"https://fonts.googleapis.com/css2?family=Amatic+SC&family=Noto+Sans+TC:wght@300&display=swap\" rel=\"stylesheet\"/>\r\n\r\n            <RouterPage />\r\n        </>\r\n\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter, Switch } from 'react-router-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}